[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Un acercamiento al Álgebra Lineal",
    "section": "",
    "text": "Prefacio\nAquí encontrarán unas notas del taller titulado Un acercamiento al álgebra lineal impartido en la Facultad de Química, UNAM.",
    "crumbs": [
      "Prefacio"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "References"
    ]
  },
  {
    "objectID": "1_intro.html",
    "href": "1_intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "2_ejemplosEV.html",
    "href": "2_ejemplosEV.html",
    "title": "2  Ejemplos: Espacios vectoriales",
    "section": "",
    "text": "In summary, this book has no content whatsoever.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Ejemplos: Espacios vectoriales</span>"
    ]
  },
  {
    "objectID": "1_introEV.html",
    "href": "1_introEV.html",
    "title": "1  Introducción",
    "section": "",
    "text": "Definición de espacio vectorial\n\n\n\n\n\nUn espacio vectorial \\(\\mathbf{V}\\) sobre un campo escalar \\(\\mathbb{F}\\) consisten de un conjunto de cosas en donde se definen dos operaciones:\n\nla suma entre cosas, y\nla multiplicación de una cosa por un escalar.\n\nTípicamente las cosas se llaman vectores.\n\n\n\nLas operaciones cumplen las siguientes propiedades.\n\n\n\n\n\n\n1. Cerradura de la suma\n\n\n\n\n\nPara cada par de elementos \\(\\vec{v},\\,\\vec{w}\\) en \\(\\mathbf{V}\\) existe un único elemento \\(\\vec{v}+\\vec{w}\\) en \\(\\mathbf{V}\\).\n\n\n\n\n\n\n\n\n\n2. Cerradura de la multiplicación\n\n\n\n\n\nPara cada elemento \\(\\alpha\\) en \\(\\mathbb{F}\\) y cada elemento \\(\\vec{v}\\) en \\(\\mathbf{V}\\) existe un único elemento \\(\\alpha \\vec{v}\\) en \\(\\mathbf{V}\\).\n\n\n\n\n\n\n\n\n\n3. Conmutatividad de la suma\n\n\n\n\n\nPara cada par de elementos \\(\\vec{v},\\,\\vec{w}\\) en \\(\\mathbf{V}\\) se cumple que \\(\\vec{v}+\\vec{w}=\\vec{w}+\\vec{v}\\)"
  },
  {
    "objectID": "9_modosnormales.html#tres-masas-lineales",
    "href": "9_modosnormales.html#tres-masas-lineales",
    "title": "9  Modos normales de vibración",
    "section": "9.1 Tres masas lineales",
    "text": "9.1 Tres masas lineales\n\n\nCode\nfrom pylab import *\nimport plotly.graph_objects as go\n\n\n\ndef Graficar(ω,uvec,m1,m2,m3):\n\n    T      = 2*pi/ω   # periodo\n    veces  = 10       # número de periodos\n    masa   = np.array([m1,m2,m3])\n\n    # Posición en el tiempo cero\n    t0 = 0\n    u1 = uvec[0]*exp(1J*ω*t0)/sqrt(m1)\n    u2 = uvec[1]*exp(1J*ω*t0)/sqrt(m2)\n    u3 = uvec[2]*exp(1J*ω*t0)/sqrt(m3)\n    x0 = np.array([0+u1, 2+u2, 4+u3])\n    y0 = np.array([   0,    0,    0])\n\n    time   = linspace(t0,veces*T,endpoint=False)\n\n    Frames = []\n    for t in time:\n        u1 = uvec[0]*exp(1J*ω*t)/sqrt(m1)\n        u2 = uvec[1]*exp(1J*ω*t)/sqrt(m2)\n        u3 = uvec[2]*exp(1J*ω*t)/sqrt(m3)\n        x  = np.array([0+u1, 2+u2, 4+u3])\n        y  = np.array([   0,    0,    0])\n        Frames.append( go.Frame(data=[ go.Scatter(x=x.real,\n                                                y=y.real,\n                                                line_color='blue',\n                                                mode=\"lines\",showlegend=False),\n                                    go.Scatter(x=x.real,\n                                                y=y.real,\n                                                mode=\"markers\",\n                                                marker=dict(color=\"red\",size=40*sqrt(masa)/max(sqrt(masa))),\n                                                name=f'time = {t:.2f}')\n                                        ]) )\n    fig = go.Figure(\n        data = [go.Scatter(x=x0.real,\n                        y=y0.real,\n                        line_color='blue',\n                        mode=\"lines\",showlegend=False),\n                go.Scatter(x=x0.real, \n                        y=y0.real,\n                        mode=\"markers\",\n                        marker=dict(color=\"red\",size=40*sqrt(masa)/max(sqrt(masa))),\n                        name=f'time = {t0:.2f}')\n                        ],\n        layout = go.Layout(xaxis=dict(range=[  -1.5,   5.5], autorange=False),\n                        yaxis=dict(range=[-0.5, 0.5], autorange=False),\n                        showlegend=True,\n                        title=f\"Tres masas: frecuencia={ω:.2f}\",\n                        updatemenus=[dict(type    = \"buttons\",\n                                            direction = \"right\",\n                                            buttons = [dict(label=\"Play\",\n                                                            method  = \"animate\",\n                                                            args    = [None,\n                                                                        dict(frame = dict(duration=100,redraw=True), \n                                                                            transition  = dict(duration=4),\n                                                                            fromcurrent = True,\n                                                                            mode        = 'immediate')])])]),\n        frames = Frames\n    )\n\n    fig.show()\n    return\n\n\n\n\nCode\nκ12,κ23   = 1,1\nm1,m2,m3  = 5,5,1\n\nD = np.array([\n    [          κ12/m1, -κ12/sqrt(m1*m2),                0],\n    [-κ12/sqrt(m1*m2),     (κ12+κ23)/m2, -κ23/sqrt(m2*m3)],\n    [               0, -κ23/sqrt(m2*m3),     κ23/sqrt(m3)]\n])\n\nω2,Avec = eigh(D)\n\n\n\n\nCode\nω    = sqrt(ω2[1])\nuvec = Avec.T[1]\nGraficar(ω,uvec,m1,m2,m3)\n\n\n\n                                                \n\n\n\n\nCode\nω    = sqrt(ω2[2])\nuvec = Avec.T[2]\nGraficar(ω,uvec,m1,m2,m3)"
  },
  {
    "objectID": "5_espaciogenerado.html",
    "href": "5_espaciogenerado.html",
    "title": "5  Espacio generado",
    "section": "",
    "text": "vecctores linealmente independientes"
  }
]